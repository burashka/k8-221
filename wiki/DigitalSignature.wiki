_Кому не хватает решительной воли – не хватает ума.
Уильям Шекспир_

На svn лежит проект Signature - это некий первый прототип использования ЭЦП

_Данный раздел находится в разработке. Описание классов будет в ближайшее время_
В проекте находятся следующие классы:
  # CertificateContainer - контейнер-сертификат (контейнер для открытого ключа, хранится в базе)
  # SignatureContainer - контейнер-подпись (контейнер для закрытого ключа, хранится у клиента)
  # GenerateKeys - класс, генерирующий пару ключей (открытый и закрытый)
  # Signing - класс, реализующий подписывание текста
  # Validating - класс, реализующий валидацию подписи
  # TestClass - тестовый класс, в нем есть примеры использования классов

==Возможные константы==

===Алгоритмы шифрования===
  * RSA
  * DSA

===Хеш-функции===
  * MD2
  * MD5
  * SHA1
  * SHA256
  * SHA384
  * SHA512
  * NONE

===Таблица совместимости алгоритмов шифрования и алгоритмов хеширования===
|||hash\alg||DSA||RSA||
||MD2||-||+||
||MD5||-||+||
||SHA1||+||+||
||SHA256||-||+||
||SHA384||-||+||
||SHA512||-||+||
||NONE||+||+||


  
==Как использовать==
  * Создать пару ключей можно так GenerateKeys keys= new GenerateKeys(название алгоритма)
  * Инициализация сертификата new CertificateContainer(название функции хеширования, название алгоритма, открытый ключ в виде строчки)
  * Инициализация контейнера-подписи new SignatureContainer(название функции хеширования, название алгоритма, открытый ключ в виде строчки)
  * Подписывание строчки str, контейнером-подписью key:
byte[] arr = Signing.sign(key, str)
  * Валидация подписи arr, строчки str сертификатом cert:
boolean result = Validating.validate(cert, str, arr)